
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using VR_AE_Patcher.Patchers;
using Mutagen.Bethesda.Environments;
using VR_AE_Patcher.Mods;
using VR_AE_Patcher.Environment;
using Noggog;
using Loqui;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Loqui;
using System.Reflection;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using System.Collections.Immutable;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Environments.DI;
using Mutagen.Bethesda.Plugins.Binary.Parameters;

namespace VR_AE_Patcher
{
    public class Program
    {
        private const string extension = "esm";
        private static Lazy<Settings>? settings;
        private static readonly CancellationTokenSource CancellationTokenSource = new();
        public static Task<int> Main(string[] args)
        {
            SynthesisPipeline.Instance.SetAutogeneratedSettings<Settings>("Settings", "settings.json", out var settings);
            Program.settings = settings;

            return SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(CreatePatch, new PatcherPreferences() {
                    Cancel = CancellationTokenSource.Token,
                    NoPatch = true,
                    AddImplicitMasters = true,
                    IncludeDisabledMods = false //cc mods don't get loaded from other locations if this is false?
                })
                .SetTypicalOpen(GameRelease.SkyrimSE, $"{settings.Value.PatchName}.{extension}")
                .Run(args);
        }

        public static async void CreatePatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            var modGetters =  GameCategory.Skyrim.ToModRegistration()
                .GetterType
                .GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly)
                .Where(p => p.PropertyType.IsGenericType && p.PropertyType.IsAssignableTo(typeof(IGroupGetter)))
                .Select(p =>
                    LoquiRegistration.StaticRegister.Registrations
                    .FirstOrDefault(x => x.GetterType == p.PropertyType.GetGenericArguments()[0]))
                .Where(x => x != null)
                .Cast<ILoquiRegistration>()
                .Select(x => new RecordTypes(x.ClassType, x.GetterType, x.SetterType))
                .ToImmutableArray();

            var dryRun = settings?.Value.DryRun == true;
            if (!dryRun)
            {
                state.PatchMod.UsingLocalization = true;
                state.PatchMod.ModHeader.Flags = SkyrimModHeader.HeaderFlag.Localized | SkyrimModHeader.HeaderFlag.Master;
            }

            //get reg keys for skyrim ae and vr
            //get data folder paths

            var aePath = settings?.Value.SkyrimAEPath;
            var vrPath = settings?.Value.SkyrimVRPath;
            if (String.IsNullOrWhiteSpace(aePath))
            {
                aePath = @"D:\SteamLibrary\steamapps\common\Skyrim Special Edition\Data";
                //todo: get reg key
            }

            if (String.IsNullOrWhiteSpace(vrPath))
            {
                vrPath = @"D:\SteamLibrary\steamapps\common\SkyrimVR\Data";
                //todo: get reg key
            }

            var leftEnv = GameEnvironment.Typical
                .Builder<ISkyrimMod, ISkyrimModGetter>(GameRelease.SkyrimSE)
                .WithTargetDataFolder(settings!.Value.SkyrimAEPath!)
                .WithLoadOrder(LoadOrders.SSE)
                .Build()
                .ToContextualEnvironment();
       
            var rightEnv = GameEnvironment.Typical
                .Builder<ISkyrimMod, ISkyrimModGetter>(GameRelease.SkyrimSE)
                .WithTargetDataFolder(settings!.Value.SkyrimVRPath!)
                .WithLoadOrder(LoadOrders.SSE) //we don't want to include SkyrimVR.esm in the load order cause it can already overrite our mod
                .Build()
                .ToContextualEnvironment();

            var formKey = FormKey.Factory("10B161:Skyrim.esm");
            leftEnv.LinkCache.TryResolve<IActivatorGetter>(formKey, out var activatorLeft);
            rightEnv.LinkCache.TryResolve<IActivatorGetter>(formKey, out var activatorRight);

            var newMod = new SkyrimMod(ModKey.FromFileName($"{settings!.Value.PatchName}_Patcher.{extension}"), SkyrimRelease.SkyrimSE);
            newMod.UsingLocalization = true;
            newMod.ModHeader.Flags = SkyrimModHeader.HeaderFlag.Localized | SkyrimModHeader.HeaderFlag.Master;

            var patcher = new SkyrimEnvDiffPatcher(leftEnv, rightEnv, newMod,
                typeof(IWeatherGetter),
                typeof(IImageSpaceGetter),
                typeof(IImageSpaceAdapterGetter)
            );

            patcher.Patch();
            newMod.WriteToBinary(
                settings?.Value.SkyrimVRPath + $"/{settings!.Value.PatchName}_Patcher.{extension}",
                new BinaryWriteParameters()
                {
                    MastersListOrdering = new MastersListOrderingByLoadOrder(rightEnv.LoadOrder),
                    OverriddenFormsOption = OverriddenFormsOption.Iterate,

                });
            return;
        }
    }
}
